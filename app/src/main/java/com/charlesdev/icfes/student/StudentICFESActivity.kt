package com.charlesdev.icfes.student

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.layout.*
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.navigation.NavHostController
import androidx.navigation.compose.NavHost
import androidx.navigation.compose.composable
import androidx.navigation.compose.rememberNavController
import com.charlesdev.icfes.student.screens.*
import com.charlesdev.icfes.student.simulation.ICFESSimulationScreen
import com.charlesdev.icfes.ui.theme.IcfesTheme

class StudentICFESActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        setContent {
            IcfesTheme {
                Surface(
                    modifier = Modifier.fillMaxSize(),
                    color = MaterialTheme.colorScheme.background
                ) {
                    ICFESStudentApp()
                }
            }
        }
    }
}

@Composable
fun ICFESStudentApp() {
    val navController = rememberNavController()

    NavHost(
        navController = navController,
        startDestination = "home"
    ) {
        // üè† Pantalla principal (Dashboard ICFES)
        composable("home") {
            ICFESHomeScreen(
                navController = navController,
                onNavigateToQuiz = { moduleId, sessionType ->
                    navController.navigate("quiz/$moduleId/$sessionType")
                }
            )
        }

        // üìö Selecci√≥n de m√≥dulos
        composable("modules") {
            ICFESModuleSelectionScreen(
                navController = navController,
                onNavigateToQuiz = { moduleId, sessionType ->
                    navController.navigate("quiz/$moduleId/$sessionType")
                }
            )
        }

        // üìù Quiz por m√≥dulo y tipo de sesi√≥n (m√≥dulos individuales)
        composable("quiz/{moduleId}/{sessionType}") { backStackEntry ->
            val moduleId = backStackEntry.arguments?.getString("moduleId") ?: ""
            val sessionType = backStackEntry.arguments?.getString("sessionType") ?: "practice"

            ICFESQuizScreen(
                navController = navController,
                moduleId = moduleId,
                sessionType = sessionType,
                onQuizComplete = {
                    // Navegaci√≥n para m√≥dulos individuales
                    navController.navigate("modules") {
                        popUpTo("quiz/$moduleId/$sessionType") {
                            inclusive = true
                        }
                    }
                }
            )
        }

        // üéØ SIMULACRO COMPLETO ICFES - NUEVA EXPERIENCIA INDEPENDIENTE
        composable("simulation") {
            ICFESSimulationScreen(
                navController = navController,
                onSimulationComplete = {
                    // Volver al home despu√©s del simulacro completo
                    navController.navigate("home") {
                        popUpTo("home") { inclusive = true }
                    }
                }
            )
        }

        // üìä Progreso detallado
        composable("progress") {
            ICFESProgressScreen(navController = navController)
        }

        // üèÜ Logros y badges
        composable("achievements") {
            ICFESAchievementsScreen(navController = navController)
        }

        // üë§ Perfil del estudiante
        composable("profile") {
            ICFESProfileScreen(navController = navController)
        }

        // ‚öôÔ∏è Configuraci√≥n
        composable("settings") {
            ICFESSettingsScreen(navController = navController)
        }

        // üìñ Detalles de un m√≥dulo espec√≠fico
        composable("module/{moduleId}") { backStackEntry ->
            val moduleId = backStackEntry.arguments?.getString("moduleId") ?: ""
            ICFESModuleDetailScreen(
                navController = navController,
                moduleId = moduleId
            )
        }

        // üîç RUTAS ADICIONALES PARA SIMULACRO (Opcionales - para futuras funcionalidades)

        // Historial de simulacros
        composable("simulation_history") {
            ICFESSimulationHistoryScreen(navController = navController)
        }

        // An√°lisis detallado de un simulacro espec√≠fico
        composable("simulation_analysis/{simulationId}") { backStackEntry ->
            val simulationId = backStackEntry.arguments?.getString("simulationId") ?: ""
            ICFESSimulationAnalysisScreen(
                navController = navController,
                simulationId = simulationId
            )
        }
    }
}

// ‚úÖ PANTALLAS EXISTENTES (mantener como est√°n)

@Composable
fun ICFESProgressScreen(navController: NavHostController) {
    ICFESPlaceholderScreen(
        navController = navController,
        title = "üìä Progreso Detallado",
        description = "An√°lisis completo de tu rendimiento en cada m√≥dulo ICFES",
        icon = "üìà"
    )
}

@Composable
fun ICFESAchievementsScreen(navController: NavHostController) {
    ICFESPlaceholderScreen(
        navController = navController,
        title = "üèÜ Logros y Badges",
        description = "Desbloquea logros mientras mejoras tus habilidades ICFES",
        icon = "üåü"
    )
}

@Composable
fun ICFESProfileScreen(navController: NavHostController) {
    ICFESPlaceholderScreen(
        navController = navController,
        title = "üë§ Perfil de Estudiante",
        description = "Gestiona tu informaci√≥n personal y objetivos ICFES",
        icon = "üéì"
    )
}

@Composable
fun ICFESSettingsScreen(navController: NavHostController) {
    ICFESPlaceholderScreen(
        navController = navController,
        title = "‚öôÔ∏è Configuraci√≥n",
        description = "Personaliza tu experiencia de aprendizaje",
        icon = "üîß"
    )
}

@Composable
fun ICFESModuleDetailScreen(navController: NavHostController, moduleId: String) {
    ICFESPlaceholderScreen(
        navController = navController,
        title = "üìñ Detalle del M√≥dulo",
        description = "Informaci√≥n detallada sobre el m√≥dulo: $moduleId",
        icon = "üìö"
    )
}

// ‚úÖ NUEVAS PANTALLAS PLACEHOLDER PARA SIMULACRO (Futuras funcionalidades)

@Composable
fun ICFESSimulationHistoryScreen(navController: NavHostController) {
    ICFESPlaceholderScreen(
        navController = navController,
        title = "üìã Historial de Simulacros",
        description = "Revisa todos tus simulacros anteriores y compara tu progreso",
        icon = "üìä"
    )
}

@Composable
fun ICFESSimulationAnalysisScreen(navController: NavHostController, simulationId: String) {
    ICFESPlaceholderScreen(
        navController = navController,
        title = "üîç An√°lisis Detallado",
        description = "An√°lisis profundo del simulacro: $simulationId",
        icon = "üìà"
    )
}

// ‚úÖ PANTALLA PLACEHOLDER REUTILIZABLE (mantener igual)

@Composable
fun ICFESPlaceholderScreen(
    navController: NavHostController,
    title: String,
    description: String,
    icon: String
) {
    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(24.dp),
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.Center
    ) {
        Text(
            text = icon,
            style = MaterialTheme.typography.displayLarge
        )
        Spacer(modifier = Modifier.height(16.dp))
        Text(
            text = title,
            style = MaterialTheme.typography.headlineMedium,
            fontWeight = FontWeight.Bold
        )
        Spacer(modifier = Modifier.height(8.dp))
        Text(
            text = description,
            style = MaterialTheme.typography.bodyLarge,
            textAlign = TextAlign.Center
        )
        Spacer(modifier = Modifier.height(24.dp))
        Text(
            text = "üöÄ Pr√≥ximamente disponible",
            style = MaterialTheme.typography.bodyMedium,
            color = MaterialTheme.colorScheme.primary
        )
        Spacer(modifier = Modifier.height(32.dp))
        OutlinedButton(
            onClick = { navController.navigateUp() }
        ) {
            Icon(
                Icons.Default.ArrowBack,
                contentDescription = null
            )
            Spacer(modifier = Modifier.width(8.dp))
            Text("Volver")
        }
    }
}